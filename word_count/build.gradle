buildscript {
    repositories {
        for (repo_url in project.parent.ext.maven_repo_url_list) {
            maven { url(repo_url) }
        }
    }
}
plugins {
    id 'java'
    id "de.undercouch.download" version "4.1.1"
}

repositories {
    for (repo_url in project.parent.ext.maven_repo_url_list) {
        maven { url(repo_url) }
    }
}

group = "${project.main_group}.${project.getName()}"
sourceCompatibility = project.java_version
targetCompatibility = project.java_version
version = project.main_version

def flink_version = "1.11.2"
def scala_binary_version = 2.11
dependencies {
    implementation("org.apache.flink:flink-core:${flink_version}")
    implementation("org.apache.flink:flink-java:${flink_version}")
    implementation("org.apache.flink:flink-scala_${scala_binary_version}:${flink_version}")
    implementation("org.apache.flink:flink-clients_${scala_binary_version}:${flink_version}")
    testImplementation("junit:junit:4.12")
}
test {
    useJUnit()
}

def jarName = "${project.getName()}-with-dependencies"
jar {
    manifest {
        attributes "Main-Class": "flink.learning.example.wordcount.WordCount"
    }
    setArchivesBaseName(jarName)
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task runLocalWordCount(type: Exec) {
    executable("java")
    args(
            "-jar", project.file("build/libs/${jarName}-${project.getVersion()}.jar")
    )
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    dependsOn(jar)
}

// ********************** build docker images **********************
def buildDockerPath = "${project.buildDir}/docker/"
def httpProxy = java.util.Optional.ofNullable(System.getenv("http_proxy")).orElse("")
def httpsProxy = java.util.Optional.ofNullable(System.getenv("https_proxy")).orElse("")

task downloadFlinkPackage(type: Download) {
    src "https://mirror.bit.edu.cn/apache/flink/flink-1.11.2/flink-1.11.2-bin-scala_2.11.tgz"
    dest "${buildDockerPath}/flink-1.11.2-bin-scala_2.11.tgz"
    tempAndMove true
    overwrite false
}
def keysDirectory = "${buildDockerPath}/keys"
def privateKeyFile = project.file("${keysDirectory}/id_rsa")
def publicKeyFile = project.file("${keysDirectory}/id_rsa.pub")
task generateKeys {
    doLast {
        if (privateKeyFile.exists() && publicKeyFile.exists()) {
            println("keys exists, do nothing...")
            return
        }
        privateKeyFile.getParentFile().mkdirs()
        exec {
            executable("ssh-keygen")
            args(
                    "-t", "rsa",
                    "-N", "",
                    "-f", privateKeyFile.getAbsolutePath()
            )
        }
    }
}
def imageName = "single_cluster:${project.getVersion()}"
task buildImage(type: Exec) {
    executable("docker")
    args(
            "build", buildDockerPath,
            "-f", "${project.file("docker/single.cluster.dockerfile")}",
            "--build-arg", "http_proxy=${httpProxy}",
            "--build-arg", "https_proxy=${httpsProxy}",
            "-t", imageName,
    )
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    doLast {
        println("start command: docker run --rm -d -p 8081:8081 -it ${imageName}")
    }
    dependsOn(generateKeys)
    dependsOn(downloadFlinkPackage)
}

/************ groovy functions ************/
def dockerContainerExists(String containerName) {
    def execResult = exec {
        commandLine("docker")
        args("inspect", containerName)
        ignoreExitValue(true)
    }
    return 0 == execResult.getExitValue()
}

def startDockerContainer(String containerName, String imageName) {
    exec {
        commandLine("docker")
        args(
                "run", "--rm",
                "-p", "8081:8081",
                "--name", containerName,
                "-d", imageName,
        )
    }
}

def stopDockerContainer(String containerName) {
    exec {
        commandLine("docker")
        args("kill", containerName)
    }
}
/************ groovy functions ends ************/
def containerName = "single_cluster"
task restartDocker() {
    doLast {
        def exists = dockerContainerExists(containerName)
        if (exists) {
            stopDockerContainer(containerName)
        }
        startDockerContainer(containerName, imageName)
    }
}
task stopDocker() {
    onlyIf {
        def exists = dockerContainerExists(containerName)
        if (!exists) {
            println("${containerName} not exists, do nothing.")
        }
        return exists
    }
    doLast {
        stopDockerContainer(containerName)
    }
}

buildscript {
    repositories {
        for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
            maven { url(mavenRepositoryUrl) }
        }
    }
}
plugins {
    id 'java'
    id "org.springframework.boot" version "2.2.2.RELEASE"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
}

group = project.rootProject.ext.constructGroupName("", project.getName())
version = project.rootProject.constructVersion()
sourceCompatibility = project.rootProject.ext.javaVersion
targetCompatibility = project.rootProject.ext.javaVersion

repositories {
    for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
        maven { url(mavenRepositoryUrl) }
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation(project.rootProject.ext.jarDependency("com.google.guava", "guava"))
    implementation(project.rootProject.ext.jarDependency("org.apache.commons", "commons-lang3"))
    testImplementation(project.rootProject.ext.jarDependency("junit", "junit"))
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }
}
test {
    useJUnit()
}

def jarBaseName = "${project.getName()}-with-dependencies"
def jarPath = "${project.buildDir}/libs/${jarBaseName}-${project.getVersion()}.jar"
bootJar {
    baseName(jarBaseName)
}
task runWithJar(type: Exec) {
    executable("java")
    args(
            "-jar", jarPath,
    )
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
        println("access with chrome: http://localhost:8080/greeting?username=${randomAlphabetic(8)}")
    }
    dependsOn(bootJar)
}

/********************** build docker images **********************/
def buildDockerPath = "${project.buildDir}/docker/"
def httpProxy = java.util.Optional.ofNullable(System.getenv("http_proxy")).orElse("")
def httpsProxy = java.util.Optional.ofNullable(System.getenv("https_proxy")).orElse("")

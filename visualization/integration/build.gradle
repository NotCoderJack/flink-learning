import groovy.text.SimpleTemplateEngine

buildscript {
    repositories {
        for (mavenRepositoryUrl in project.rootProject.ext.mavenRepositoryUrlList) {
            maven { url(mavenRepositoryUrl) }
        }
    }
}

def visualizationBackendJarPath = project.rootProject.ext.visualizationBackendJarPath
def backendPath = "${project.buildDir.getAbsolutePath()}/backend"
def backendLibsPath = "${backendPath}/libs"
def bootJarPath = "${backendLibsPath}/${project.file(visualizationBackendJarPath).getName()}"
def frontendPath = "${project.buildDir.getAbsolutePath()}/frontend"
task copyBackend(type: Copy) {
    from(visualizationBackendJarPath)
    into(backendLibsPath)
    dependsOn(":visualization:backend:bootJar")
}
task copyFrontend(type: Copy) {
    from("${project(":visualization:frontend").buildDir.getAbsolutePath()}/dist")
    into(frontendPath)
    dependsOn(":visualization:frontend:yarnBuild")
}
def applicationConfigPath = "${backendPath}/application.yaml"
task renderApplicationConfig() {
    doLast {
        def templateText = project.file("application.template.yaml").text
        def binding = ["frontend_absolute_path": frontendPath]
        def engine = new SimpleTemplateEngine()
        def applicationConfigContent = engine.createTemplate(templateText).make(binding)
        project.file(applicationConfigPath).text = applicationConfigContent
    }
}
task runWeb(type: Exec) {
    commandLine(
            "java",
            "-jar", bootJarPath,
            "--spring.config.location=file:${applicationConfigPath}",
    )
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    dependsOn(copyBackend)
    dependsOn(copyFrontend)
    dependsOn(renderApplicationConfig)
}